#!/usr/bin/env php
<?php

class nicehashminer
{

	public $rig;
	public $config;
	public $stats;
	public $output;
	public $current;
	public $firstrun;
	public $best;

	public function __construct()
	{
		global $argv;
		$this->args = $argv;
		$this->rig = gethostname();
		$this->best = new stdClass();
		if(file_exists(__DIR__.'/config.json'))
		{
			$this->config = json_decode(file_get_contents(__DIR__.'/config.json'));
		}
		else
		{
			$this->output .= "[".date('H:i:s')."] Missing a config.json file, please use the config.sample.json file as a template.\n";
			return;
		}
		$this->stats = $this->makerequest($this->config->settings->ethos_url, 1);
		$this->getprofitability();
		if($this->config->settings->dryrun == 0 && $this->config->settings->autoswitch == 1)
		{
			if($this->config->mine_duration==0 || ($this->config->mine_duration>0 && $this->stats->rigs->{$this->rig}->miner_secs/60 > $this->config->mine_duration*60))
			{
				$this->setconfig();
			}
		}
		if($this->config->settings->dryrun == 0 && $this->config->settings->gpuchecker == 1)
		{
			$this->rigcheck();
		}
		if($this->config->settings->dryrun == 1){
			$this->output .= "[".date('H:i:s')."] This was a dry run\n";
		}
	}

	public function getprofitability()
	{
		$json = $this->makerequest($this->config->settings->nicehash_url, '', 1);
		if(!$json)
		{
			$this->output .= "[".date('H:i:s')."] Unable to load JSON from Nicehash.\n";
			return;
		}
		$this->output .= "[".date('H:i:s')."] Summary: \n";
		foreach($json['result']['simplemultialgo'] as $id => $row)
		{
			if(array_key_exists($row['name'], $this->config->hashrates))
			{
				$profit = round($this->config->factors->$row['name'] * $row['paying'] * $this->config->hashrates->$row['name'], 8);
				$this->output .= "[".date('H:i:s')."] ". $row['name'] . ":" . number_format($profit, 8) . "\n";
				if(!isset($this->best->profit) || (isset($this->best->profit) && $this->best->profit < $profit))
				{
					$this->best->name = $row['name'];
					$this->best->paying = $row['paying'];
					$this->best->profit = $profit;
				}
			}
		}
		$this->output .= "[".date('H:i:s')."] Most profitable coin is: " . $this->best->name . " at " . number_format($this->best->profit, 8) . "\n";
		$this->output .= "[".date('H:i:s')."] Miner uptime is: " . date('H:i:s', $this->stats->rigs->{$this->rig}->miner_secs) . "\n";
	}

	public function setcurrent()
	{
		$currentpool = explode(".", $this->stats->rigs->{$this->rig}->pool);
		$this->current = $currentpool[0];
		if(!file_exists(__DIR__ . '/current.txt') || filesize(__DIR__ . '/current.txt') == 0)
		{
			file_put_contents(__DIR__ . '/current.txt', $this->current);
			$this->firstrun = true;
		}
		else
		{
			$this->current = file_get_contents(__DIR__ . '/current.txt');
		}
	}

	public function setconfig()
	{
		$this->setcurrent();
		if($this->current != $this->best->name || $this->firstrun == true)
		{
			if(empty($this->config->configs->{$this->best->name}))
			{
				$this->output .= "[".date('H:i:s')."] Missing configuration for " . $this->best->name . ".\n";
				return;
			}
			if(file_exists($this->config->settings->nicehashminer_configs . $this->config->configs->{$this->best->name}))
			{
				copy($this->config->settings->nicehashminer_configs . $this->config->configs->{$this->best->name}, $this->config->settings->home_dir . 'local.conf');
				$this->output .= "[".date('H:i:s')."] Copied configuration from " . $this->config->settings->nicehashminer_configs . $this->config->configs->{$this->best->name} . ".\n";
			}
			else
			{
				$this->output .= "[".date('H:i:s')."] Missing .conf file for " . $this->best->name . ".\n";
				return;
			}
			file_put_contents(__DIR__ . '/current.txt', $this->best->name);

			$msg = 'Switching to ' . $this->best->name . ' for at least' . $this->stats->rigs->{$this->rig}->miner_secs . ' hour';
			$this->notify($msg);
		}
	}

	public function notify($msg)
	{
		if($this->config->settings->notify == 1 && !empty($this->config->settings->pushover->token) && !empty($this->config->settings->pushover->user))
		{
			$data = array(
				'token' => $this->config->settings->pushover->token,
				'user' => $this->config->settings->pushover->user,
				'title' => 'Nicehashminer',
				'message' => $msg,
			);
			$this->makerequest($this->config->settings->pushover->url, $data);
		}
	}

	public function rigcheck()
	{
		$hashfile = shell_exec('sudo tail -1 /var/run/ethos/miner_hashes.file');
		$hashes = explode(" ", $hashfile);
		$totalhash=0;
		foreach($hashes as $key => $value)
		{
			if($value < $this->config->settings->minimumhash)
			{
				$gpudead = true;
			}
			$totalhash+=$value;
		}
		if(file_exists('gpufail.txt'))
		{
			$failcount = file_get_contents('gpufail.txt');
		}
		else
		{
			$failcount = 0;
		}
		if($gpudead > 0)
		{
			if($failcount > 5)
			{
				file_put_contents('gpufail.txt','0');
				$this->output .= "[".date('H:i:s')."] A GPU is failing: " . $hashfile;
				$msg = 'EthOS Rig ( ' . $this->rig . ' ) Rebooted.....' . $hashfile;
				$this->notify($msg);
				shell_exec('sudo reboot');
			}
			else
			{
				$this->output .= "[".date('H:i:s')."] A GPU is failing: " . $hashfile;
				$failcount++;
				file_put_contents('gpufail.txt',$failcount);
			}
		}
		else
		{
			$this->output .= "[".date('H:i:s')."] All GPUs are working: " . $hashfile;
			file_put_contents('gpufail.txt','0');
		}
		$this->output .= "[".date('H:i:s')."] Current Temp: ".$this->stats->rigs->{$this->rig}->pool."\n";
		$this->output .= "[".date('H:i:s')."] Hash Speed: " . $totalhash . " MH/s\n";
	}

	public function makerequest($url, $data = "", $json = false)
	{
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		$result = curl_exec($ch);
		curl_close($ch);

		return json_decode($result, $json);
	}

}

if(file_exists(__DIR__."/nicehashminer.log"))
{
	if(filesize(__DIR__."/nicehashminer.log")> 500000)
	{
		shell_exec('sudo cp nicehashminer.log nicehashminer.old');
		file_put_contents('nicehashminer.log','');
	}
}

$app = new nicehashminer();
echo $app->output;
